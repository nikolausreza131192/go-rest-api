// Code generated by MockGen. DO NOT EDIT.
// Source: entity/interface.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/nikolausreza131192/pos/entity"
	reflect "reflect"
)

// MockJWTToken is a mock of JWTToken interface
type MockJWTToken struct {
	ctrl     *gomock.Controller
	recorder *MockJWTTokenMockRecorder
}

// MockJWTTokenMockRecorder is the mock recorder for MockJWTToken
type MockJWTTokenMockRecorder struct {
	mock *MockJWTToken
}

// NewMockJWTToken creates a new mock instance
func NewMockJWTToken(ctrl *gomock.Controller) *MockJWTToken {
	mock := &MockJWTToken{ctrl: ctrl}
	mock.recorder = &MockJWTTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJWTToken) EXPECT() *MockJWTTokenMockRecorder {
	return m.recorder
}

// SetClaims mocks base method
func (m *MockJWTToken) SetClaims(claims entity.TokenClaims) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClaims", claims)
}

// SetClaims indicates an expected call of SetClaims
func (mr *MockJWTTokenMockRecorder) SetClaims(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaims", reflect.TypeOf((*MockJWTToken)(nil).SetClaims), claims)
}

// SignedString mocks base method
func (m *MockJWTToken) SignedString(token []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedString", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedString indicates an expected call of SignedString
func (mr *MockJWTTokenMockRecorder) SignedString(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedString", reflect.TypeOf((*MockJWTToken)(nil).SignedString), token)
}
